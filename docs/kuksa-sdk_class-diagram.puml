@startuml
'https://plantuml.com/class-diagram

package grpc {

    ManagedChannelBuilder --> ManagedChannel

    class ManagedChannel
    class ManagedChannelBuilder

}

package kuksa {

    package proto {
        class Field
        class Datapoint
        class DataEntry
        class SetResponse
        class GetResponse
        class DataEntryError
        class EntryUpdate
    }

    DataBrokerConnector -down-> DataBrokerException
    DataBrokerConnector -down-> DataBrokerConnection
    DataBrokerConnection -down-> DataBrokerTransporter
    DataBrokerConnection -down-> DataBrokerSubscriber
    DataBrokerConnection -down-> PropertyListener
    DataBrokerConnection -down-> Property
    DataBrokerConnection -left-> DataBrokerException
    DataBrokerConnection -up-> MultiListener
    DataBrokerSubscriber -up-> DataBrokerTransporter
    MultiListener -right-> DisconnectListener
    TimeoutConfig -left-* DataBrokerConnector
    JsonWebToken -right-* DataBrokerConnector

    class DataBrokerConnector {
        + connect(): DataBrokerConnection
    }

    class TimeoutConfig {
        + timeout: Long
        + timeUnit: TimeUnit
    }

    class DataBrokerTransporter {
        + jsonWebToken: JsonWebToken

        + fetch(vssPath: String, Collection<Field>): GetResponse
        + update(vssPath: String, Collection<Field>, Types.Datapoint): SetResponse
        + subscribe(vssPath: String, Field): Subscription
    }

    class DataBrokerSubscriber {
        + subscribe(vssPath: String, Field, PropertyListener)
        + subscribe<T : VssSpecification>(T, Field, VssSpecificationListener<T>)
        + unsubscribe(vssPath: String, Field, PropertyListener)
        + unsubscribe<T : VssSpecification>(T, Field, VssSpecificationListener<T>)
    }

    class DataBrokerConnection {
        + disconnectListeners: MultiListener<DisconnectListener>
        + jsonWebToken: JsonWebToken

        + subscribe(Property, PropertyListener)
        + subscribe<T : VssSpecification>(T, Collection<Field>, VssSpecificationListener<T>)
        + unsubscribe(Property, PropertyListener)
        + unsubscribe<T : VssSpecification>(T, Collection<Field>, VssSpecificationListener<T>)
        + fetch(Property): GetResponse
        + fetch<T : VssSpecification>(T, Collection<Field>)
        + update(Property, Datapoint): SetResponse
        + update(VssSpecification, Collection<Field>): SetResponse
        + disconnect()
    }
    
    interface PropertyListener {
        + onPropertyChanged(List<EntryUpdate>)
        + onError(Throwable)
    }

    class Property {
        + vssPath: String
        + fields: Collection<Types.Field>
    }

    class DataBrokerException

    abstract class MultiListener<T> {
        + register(T)
        + unregister(T)
    }

    interface DisconnectListener {
        + onDisconnect()
    }

    class JsonWebToken {
        + authScheme: String
        + authParameters: String
    }
}

DataBrokerConnector -up-> ManagedChannel
DataBrokerConnection -right-> proto

@enduml
